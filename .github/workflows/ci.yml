name: Continuous Integration
on:
  pull_request:
  push:
    branches:
      - main
      - continuous_integration
    paths-ignore:
      - '**/README.md'
  schedule:
    - cron: '0 7 * * 1'
jobs:
  integrate:
    runs-on: ubuntu-20.04
    name: 'Integrate'
    services:
      mysql:
        image: docker://mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: magento
          MYSQL_DATABASE: magento
        ports:
          - 3303:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      elasticsearch:
        image: docker://magento/magento-cloud-docker-elasticsearch:7.9-1.3.0
        ports:
          - 9200:9200
        options: -e="discovery.type=single-node" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      matrix:
        php-versions: ['7.4']
        magento-versions: ['2.4.3']
    env:
      magento-directory: /var/www/magento
      COMPOSER_MAGENTO_USERNAME: ${{ secrets.COMPOSER_MAGENTO_USERNAME }}
      COMPOSER_MAGENTO_PASSWORD: ${{ secrets.COMPOSER_MAGENTO_PASSWORD }}
    steps:
      - name: "[Init] Checkout repository"
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false

      - name: "[Init] Setup PHP"
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: hash, iconv, mbstring, intl, bcmath, ctype, gd, pdo, mysql, curl, zip, dom, sockets, soap, openssl, simplexml, xsl
          ini-values: post_max_size=256M, max_execution_time=180

      - name: "[Init] Add php-fpm"
        env:
          PHP_VERSION: ${{ matrix.php-versions }}
        run: |
          sudo apt install -y "php${PHP_VERSION}-fpm"
          sudo cp "/usr/sbin/php-fpm${PHP_VERSION}" "/usr/bin/php-fpm"
          sudo systemctl start "php${PHP_VERSION}-fpm"
          sudo systemctl status "php${PHP_VERSION}-fpm"

      - name: "[Init] Setup Apache with PHP-FPM"
        env:
          MAGENTO_ROOT: ${{ env.magento-directory }}
          PHP_VERSION: ${{ matrix.php-versions }}
        run: |
          sudo apt -qq update
          sudo apt -qq install apache2
          sudo a2enmod rewrite actions alias proxy proxy_fcgi
          sudo usermod -a -G www-data $USER
          ls -la
          find .github
          sudo cp .github/res/apache/apache.conf /etc/apache2/sites-available/000-default.conf
          sudo mkdir -p $MAGENTO_ROOT
          sudo chown -R $USER:www-data $MAGENTO_ROOT
          sudo sed -e "s?%MAGENTO_ROOT%?$(readlink -f ${MAGENTO_ROOT})?g" --in-place /etc/apache2/sites-available/000-default.conf
          sudo sed -e "s?%PHP_VERSION%?${PHP_VERSION}?g" --in-place /etc/apache2/sites-available/000-default.conf
          sudo apachectl configtest
          sudo systemctl restart apache2
          sudo systemctl status apache2

      - name: "[Init] Determine composer cache directory"
        id: composer-cache-directory
        run: "echo \"::set-output name=directory::$(composer config cache-dir)\""

      - name: "[Init] Cache Composer cache"
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache-directory.outputs.directory }}
          key: composer-${{ matrix.php-versions }}-${{ matrix.magento-versions }}
          restore-keys: |
            composer-${{ matrix.php-versions }}-${{ matrix.magento-versions }}
            composer-${{ matrix.php-versions }}-
            composer-

      - name: "[Init] Cache Magento install"
        id: magento-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.magento-directory }}
          key: magento-${{ matrix.php-versions }}-${{ matrix.magento-versions }}
          restore-keys: |
            magento-${{ matrix.php-versions }}-${{ matrix.magento-versions }}

      - name: "[Init] Prepare credentials"
        run: composer config -g http-basic.repo.magento.com "${COMPOSER_MAGENTO_USERNAME}" "${COMPOSER_MAGENTO_PASSWORD}"

      - name: "[Init] Prepare Magento install if needed"
        if: steps.magento-cache.outputs.cache-hit == 'true'
        working-directory: ${{ env.magento-directory }}
        run: |
          rm -f app/etc/env.php app/etc/config.php
          composer config discard-changes true
          composer remove mooore/magento2-module-wordpress-integration-cms --no-update --no-interaction
          composer update --no-interaction --ignore-platform-reqs
          composer config discard-changes false

      - name: "[Init] Install proper version of Magento through Composer"
        if: steps.magento-cache.outputs.cache-hit != 'true'
        env:
          MAGENTO_VERSION: ${{ matrix.magento-versions }}
          STABILITY: "--stability=stable"
          MAGENTO_ROOT: ${{ env.magento-directory }}
        run: |
          sudo rm -rf $MAGENTO_ROOT
          sudo mkdir -p $MAGENTO_ROOT
          sudo chown -R $USER:www-data $MAGENTO_ROOT
          composer create-project --repository-url=https://repo.magento.com magento/project-community-edition:$MAGENTO_VERSION $STABILITY $MAGENTO_ROOT --quiet

      - name: "[Init] Add current version of WordpressIntegrationCms"
        working-directory: ${{ env.magento-directory }}
        run: |
          composer require --dev "mooore/magento2-module-wordpress-integration-cms:dev-${GITHUB_BASE_REF:-${GITHUB_REF##*/}}" --ignore-platform-reqs
          cp -r $GITHUB_WORKSPACE/* vendor/mooore/magento2-module-wordpress-integration-cms

      - name: "[Init] Fix Magento directory permissions"
        env:
          MAGENTO_ROOT: ${{ env.magento-directory }}
        working-directory: ${{ env.magento-directory }}
        run: |
          sudo find . -type f -exec chmod 644 {} \;
          sudo find . -type d -exec chmod 755 {} \;
          sudo find var pub/static app/etc generated -type f -exec chmod g+w {} \;
          sudo find var pub/static app/etc generated -type d -exec chmod g+ws {} \;
          sudo chown -R $USER:www-data .
          sudo chmod u+x bin/magento

      - name: "[Init] Install Magento"
        working-directory: ${{ env.magento-directory }}
        run: php bin/magento setup:install --db-host="0.0.0.0" --db-password="magento" --admin-user="admin" --admin-password="Test1234!" --admin-email="admin@example.com" --admin-firstname="Mooore" --admin-lastname="Digital" --db-name="magento" --elasticsearch-host="localhost" --elasticsearch-port="9200"

